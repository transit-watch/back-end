name: Transit Watch Backend CI/CD

on:
  workflow_dispatch:
    paths:
      - '.'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 현재 리포지토리를 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # yml 생성
      - name: Make application.yml
        run: |
          # spring의 resources 경로로 이동
          cd ./src/main/resources 

          # application.yml 파일 생성
          touch ./application.yml 

          # GitHub-Actions에서 설정한 값을 application.yml  파일에 쓰기
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.yml
        shell: bash

#      - name: Upload application.yml
#        uses: actions/upload-artifact@v4
#        with:
#          name: my-artifact
#          path: |
#            src/main/resources

      # Spring Boot 애플리케이션 빌드
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Build with Gradle
        run: ./gradlew build -x test -x asciidoctor -x copyDocument

      # Docker Buildx를 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./
          # Dockerfile이 있는 위치
          file: ./Dockerfile
          # Dockerfile의 경로
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/transit-watch-backend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: NCP login and docker image pull and run start
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST_WAS }}
          username: ${{ secrets.NCP_USERNAME_WAS }}
          password: ${{ secrets.NCP_PASSWORD_WAS }}
          port: ${{ secrets.NCP_PORT_WAS }}
          script: |
            cd /root/compose
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker rm -f $(docker ps -aq)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/transit-watch-backend:${{ github.sha }}
            sudo docker run -d --name transit-watch-backend -p 8080:8080 transitwatch/transit-watch-backend:${{ github.sha }}
            sudo docker image prune -f
  ## slack
  action-slack:
    needs:
      - build-and-push
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Slack Alarm
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: GitHub-Actions CI/CD
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.